@model BazarCloth.Web.Models.ViewModels.ProductSearchViewModel


@{
    ViewBag.Title = "ProductTable";
}

<link type="text/css" rel="stylesheet" href="//cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css" />
<script src="//cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
<div style="margin-top:20px;">
    @*@using (Html.BeginForm("ProductTable", "Product", FormMethod.Post))
        {

        }*@


    @*@using (Html.BeginForm("ProductTable", "Product", FormMethod.Post))
        {
            <input name="search" placeholder="Search" id="searchItem" />
            <input type="submit" value="Search" />
        }*@
    @*<form method="post" action="/Product/ProductTable">
        </form>*@
    <form method="post">
        <div class="row">
            <div class="col-md-8">
                <div class="form-group">
                    <input name="search" class="form-control" placeholder="Search" id="searchItem" value="@Model.SearchItem"/>
                </div>
            </div>
            <div class="col-md-4">
                <div class="row">
                    <div class="col-md-4 pr-0">
                        <input type="button" id="btnSearch" class="btn btn-primary form-control" value="Search" />
                    </div>
                    <div class="col-md-4 pr-0">
                   <input type="button" id="btnReset" class="btn btn-info form-control" value="Reset" />
                    </div>
                    <div class="col-md-4 pr-0">
                        <input type="button" id="btnNew" class="btn btn-success form-control" value="Add" />
                    </div>


                </div>
            </div>
        </div>
    </form>
</div>



<hr />
<h2 class="text-center text-info">Product List</h2>
<div class="tableContainer">
    <table class="table" id="ProductDataTable">
        <thead class="thead-dark">
            <tr>
                <td class="font-weight-bold" scope="col">Name</td>
                <td class="font-weight-bold" scope="col">Catagory</td>
                <td class="font-weight-bold" scope="col">Price</td>
                <td class="font-weight-bold wrap-td" scope="col">Actions</td>
            </tr>
        </thead>
        <tbody>
            @if (Model.Products != null && Model.Products.Count > 0)
            {
                foreach (var item in Model.Products)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>
                            @if (item.Catagory != null)
                            {
                                <text>@item.Catagory.Name</text>
                            }
                            else
                            {
                                <text>-</text>
                            }
                        </td>
                        <td>@item.Price</td>
                        <td>
                            <button type="button" class="btnEdit" data-id="@item.Id">Edit</button>
                            <button type="button" class="btnDelete" data-id="@item.Id">Delete</button>
                            <button type="button" class="btnCart" data-id="@item.Id">Cart</button>
                        </td>
                    </tr>

                }
            }

        </tbody>
    </table>
    <div>
        @*@if (Model.PageNo != 1)
        {

            <button class="pageButtons" id="previousRecords" data-pageNo="@(Model.PageNo -1)">Previous</button>
        }
        <button class="pageButtons" id="nexrRecords" data-pageNo="@(Model.PageNo +1)">Next</button>*@

        @*@if (Model.Pager != null && Model.Pager.TotalPages > 1)
        {

            if (Model.Pager.CurrentPage > 1)
            {

                <button class="pageButtons" data-pageNo="1">first</button>

                <button class="pageButtons" data-pageNo="@(Model.Pager.CurrentPage - 1)">Previous</button>
            }


            for (int page = Model.Pager.StartPage; page < Model.Pager.EndPage; page++)
            {
                string activeClass = Model.Pager.CurrentPage == page ? "acive bg-info" : string.Empty;

                <button class="@activeClass pageButtons" data-pageNo="@page">@page</button>
            }

            if (Model.Pager.CurrentPage < Model.Pager.TotalPages)
            {
                <button class="pageButtons" data-pageNo="@(Model.Pager.CurrentPage+1)">Next</button>

                <button class="pageButtons" data-pageNo="@(Model.Pager.EndPage)">Last</button>

            }

        }*@

        <div class="product-pagination text-center clearfix">
            @if (Model.Pager != null && Model.Pager.TotalPages > 1)
            {
            <ul class="flat-pagination">
                @if (Model.Pager.CurrentPage > 1)
                {
                    <li class="prev">
                        <button class="pageButtons btn btn-secondary btn-sm" data-pageNo="@(Model.Pager.CurrentPage - 1)"><i class="fa fa-angle-left"></i></button>
                    </li>
                }

                @for (int page = Model.Pager.StartPage; page < Model.Pager.EndPage; page++)
                {
                    string activeClass = Model.Pager.CurrentPage == page ? "acive bg-info" : string.Empty;

                    @*<button class="@activeClass pageButtons" data-pageNo="@page">@page</button>*@
                    <li><button class ="@activeClass pageButtons btn btn-secondary btn-sm" data-pageNo="@page">@page</button></li>
                }


                @if (Model.Pager.CurrentPage < Model.Pager.TotalPages)
                {

                    <li><button class="pageButtons btn btn-secondary btn-sm" data-pageNo="@(Model.Pager.CurrentPage+1)"><i class="fa fa-angle-right"></i></button></li>
                    <li><button class="pageButtons btn btn-secondary btn-sm" data-pageNo="@(Model.Pager.EndPage)">>></button></li>

                }

            </ul><!-- /.flat-pagination -->

            }

        </div>

    </div>
</div>
<script>
    $(document).ready(function () {

        //$("#ProductDataTable").DataTable();
        var Produts = [];
        $(".btnCart").click(function () {

            var productId = $(this).attr("data-id");

            Produts.push(productId);

            //if you are not getting the Cookie its mean path is not set then uuse this

            //$.cookie('CartProduct', Produts.join('-'), {path:"/"});
            $.cookie('CartProduct', Produts.join('-'));

            alert("Product Add Successfuly");

        });

        $(".pageButtons").click(function () {

            $.ajax(
                {
                    url: '@Url.Action("ProductTable", "Product")',
                    data: { pageNo: $(this).attr("data-pageNo") }
                   
                }).done(function (result) {

                    $("#tableContainer").html(result);
                    focusAction("tableContainer")
                }).fail(function (XMLHttpRequest, textStatus, errorThrown) {
                    alert("FAil");
                });
        });
        $("#btnSearch").click(function () {
            var searchitem = $("#searchItem").val();

            //var URL = "/Product/ProductTable";
            // $.post(URL, { search: searchitem }, function (result) {

            //    $("#tableContainer").html(result);
            //});

            $.ajax(
                {
                    url: '@Url.Action("ProductTable", "Product")',//'/Product/ProductTable',
                    data: { search: searchitem }

                }).done(function (response) {

                    $("#tableContainer").html(response);
                }).fail(function (XMLHttpRequest, textStatus, errorThrown) {
                    alert("Error");
                });
        });
     

        $("#btnReset").click(function () {
            var searchval = "";

            $.ajax(
                {
                    url: '@Url.Action("ProductTable", "Product")',
                    data: { search: searchval}
                }).done(function (result) {
                    $("#tableContainer").html(result);
                }).fail(function (XMLHttpRequest, textStatus, errorThrown) {
                    alert("Failed")
                });
        });
        $("#btnNew").click(function () {

            $.ajax({
                url:'@Url.Action("Create", "Product")', //'/Product/Create'
            }).done(function (response) {
                $("#CreateFormDiv").html(response);

                focusAction("CreateFormDiv");
                    
            }).fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Something is wrong")
            });
        });


        $(".btnEdit").click(function () {

            var val = $(this).data("id");
        
            $.ajax({
                url: '@Url.Action("Edit", "Product")',  //'/Product/Edit',
                data: { id: $(this).attr("data-id") }
            }).done(function (result) {
              
                $("#CreateFormDiv").html(result);
                focusAction("CreateFormDiv");
            }).fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Operation is not perform Succcessfuly");
            });
        });

        $(".btnDelete").click(function () {

            swal({
                title: "Confirmation?",
                text: "Are you Sure you want to delete it!",
                icon: "warning",
                buttons: true,
                dangerMode: true,
            })
                .then((willDelete) => {
                    if (willDelete) {

                        $.ajax({

                            url: '@Url.Action("Delete", "Product")',  //'/Product/Delete',
                            type: 'POST',
                            data: { id: $(this).attr("data-id") }

                        }).done(function (result) {
                            $("#tableContainer").html(result);

                            swal("Poof! Record has been deleted!", {
                                icon: "success",
                            });

                        }).fail(function (XMLHttpRequest, textStatus, errorThrown) {
                            //alert("Proces in UnSuccess");
                            swal("Process Failed!");
                        });

                    } else {
                        swal("Record is Not Deleted yet!");
                    }
                });

            //var confirmation = confirm("Are you sure you want to delete this product");
            //if (confirmation) {
            //    $.ajax({

            //        url: '/Product/Delete',
            //        type: 'POST',
            //        data: { id: $(this).attr("data-id")}

            //    }).done(function (result) {
            //        $("#tableContainer").html(result);

            //        }).fail(function (XMLHttpRequest, textStatus, errorThrown) {
            //            alert("Proces in UnSuccess");
            //        });
            //}
        });
    });
</script>

